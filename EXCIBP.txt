import pandas as pd
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('/content/Car_Insurance_Dataset.csv')

# Extract independent and target variables
X = data.drop('Payment', axis=1)  # Features
y = data['Payment']  # Target

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train an XGBoost Regressor
model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

def remove_outliers_iqr(data):
    Q1 = np.percentile(data, 25)
    Q3 = np.percentile(data, 75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    data_no_outliers = data[(data >= lower_bound) & (data <= upper_bound)]
    return data_no_outliers


# Remove outliers from actual and predicted payments
y_test_no_outliers = remove_outliers_iqr(y_test)
y_pred_no_outliers = remove_outliers_iqr(y_pred)

# Plot box plots for actual vs predicted values without outliers
plt.figure(figsize=(8, 6))
plt.boxplot([y_test_no_outliers, y_pred_no_outliers],
            labels=['Actual Payment (No Outliers)', 'Predicted Payment (No Outliers)'])
plt.title('Box Plot: Actual vs Predicted Payment (Without Outliers)')
plt.ylabel('Payment')
plt.show()